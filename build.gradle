//properties inherited by child projects (ext properties are inherited on project level)

//distribution directory to copy all results of sub-project installApp calls. Relative from cwd
ext.distributionDir = file('../distribution')

//directory where the microservices should be created
ext.servicesDir = file('../domaincode')

allprojects {
	apply plugin: 'idea'
}

idea {
    project {
        languageLevel = '1.7'
    }
}

//copy files from blueprint to the new microservice you want to create
task copyFilesFromBlueprint(type: Copy){
	if(project.hasProperty('msname')){
		from 'blueprint'
		into "$servicesDir/$msname"
		include '**/*.java' //copy all java files
		include '**/*.gradle' //copy all gradle files (build.gradle and settings.gradle)
		include '**/*.xml'
		
		//eclude folders and files that we don't want to copy
		exclude '.gradle'
		exclude '.settings'
		exclude 'bin'
		exclude 'build'
		exclude 'readme.txt'
		//all other filetypes are excluded by default
	}
}

//Overwrites the settings.gradle file with the settings.gradle.blueprint file
//After overwriting, scans the microserviceProjects dir and adds every microservices as an include
task updateMicroserviceIncludes {

	//replace the settings.gradle file with the blueprint
	def settingsFileName = "settings.gradle"
	def blueprint = new File(settingsFileName + ".blueprint")
	def origFile = new File(settingsFileName)
	def settingsFilePath = origFile.toPath()
	origFile.delete()
	java.nio.file.Files.copy(blueprint.toPath(), settingsFilePath)
	
	//Include all microservices from the microserviceProjects directory
	def settingsFile = new File(settingsFileName) //open the fresh settings file
	FileCollection microserviceProjects = files(servicesDir.listFiles() ?: [])
	microserviceProjects.each { File serviceProject -> 
		if(serviceProject.isDirectory()){
			def projectInclude = "include ':$serviceProject.name'"
			//needs to be escaped if windows paths are used because parsing from the settings.gradle 
			//file later on would throw an exception otherwise
			def escapedProjectPath = serviceProject.path.replace("\\", "\\\\")
			def projectLocation = "project(':$serviceProject.name').projectDir = file('$escapedProjectPath')"
			settingsFile << "\n\n" + projectInclude 
			settingsFile << "\n" + projectLocation
		}
	}
}
updateMicroserviceIncludes.dependsOn copyFilesFromBlueprint

//Call this task as shown: gradle createMS -Pmsname="your-microservice"
//This task copies the blueprint and renames the copy to "your-microservice".
//It adds the new microservice as a child project in the settings.gradle file of 
// the root.
task createMS << {}
createMS.dependsOn updateMicroserviceIncludes

task clean(type: Delete) {
	delete distributionDir.name
}